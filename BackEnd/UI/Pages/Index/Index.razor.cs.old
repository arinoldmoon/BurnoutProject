using Grpc.Core;
using GrpcService.Protos;
using Microsoft.AspNetCore.Components;
using UI.Models;
using UI.Services;


namespace UI.Pages.Index
{
    public partial class IndexComponent : ComponentBase, IDisposable
    {
        [Inject]
        protected OvenService? _ovenService { get; set; }

        [Inject]
        protected GlobalService? _globals { get; set; }

        private ProtoOvenResponse Monitor = new ProtoOvenResponse();
        private CancellationTokenSource cancellationToken = new CancellationTokenSource();
        private AsyncServerStreamingCall<ProtoOvenResponse>? response;
        protected int PercenValue;


        private void Reload()
        {
            InvokeAsync(StateHasChanged);
        }

        protected async void OnPropertyChanged(PropertyChangedEventArgs args)
        {
            if (args.Name == "GlobalMachineInfo")
            {
                if (_globals!.ServiceConnected)
                {
                    await MonitorDevice();
                }
            }

            if (args.Name == "GlobalPattern")
            {
                Reload();
            }
        }

        public void Dispose()
        {
            cancellationToken.Cancel();
            cancellationToken.Dispose();
            GC.SuppressFinalize(this);
            Console.WriteLine("Call Dispose");
        }

        protected override void OnInitialized()
        {
            _globals!.GlobalMonitor = new ProtoOvenResponse()
            {
                Temp = new Temp(),
                Coil = new Coil(),
                Status = new MachineStatus()
            };
            _globals.GlobalMonitor.Status.TempLogList = new ActualLogList();

            _globals.GlobalPattern = new ProtoPattern();
            _globals.GlobalPattern.AirPump = new ProtoAirpump();
            _globals.ActualPoint = new List<OperationLog>();
            _globals.SetPoint = new List<ProtoPatternDetail>();
            _globals.OperationLogInfo = new ProtoOperationLogInfo();

            _globals.PropertyChanged += OnPropertyChanged;
        }

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
                ProtoServiceConnection response = await _ovenService!.DeviceConnect();
                if (response != null)
                {
                    _globals!.ServiceConnected = true;
                    _globals.PlcConnected = response.PlcConnected;
                    _globals.GlobalMachineInfo = response.OvenInfo;
                    _globals.OperationLogInfo = response.OperationLogInfo;

                    Console.WriteLine("DeviceConnect : True");
                    Reload();
                }
                else
                {
                    Console.WriteLine("DeviceConnect : False");
                }
            }
        }

        private async Task MonitorDevice()
        {
            Console.WriteLine("MonitorDevice");
            if (_globals!.PlcConnected)
            {
                await Task.Run(() =>
                {
                    ThreadPool.QueueUserWorkItem(new WaitCallback(async (state) =>
                    {
                        response = await _ovenService!.MonitorDevice();
                        while (!cancellationToken.IsCancellationRequested && await response.ResponseStream.MoveNext(CancellationToken.None))
                        {
                            Monitor.Temp = new Temp()
                            {
                                TempOven = response.ResponseStream.Current.Temp.TempOven,
                                TempAFB = response.ResponseStream.Current.Temp.TempAFB,
                                TempFloor = response.ResponseStream.Current.Temp.TempFloor,
                                TempTube = response.ResponseStream.Current.Temp.TempTube
                            };

                            Monitor.Coil = new Coil()
                            {
                                CoilOven = response.ResponseStream.Current.Coil.CoilOven,
                                CoilAFB = response.ResponseStream.Current.Coil.CoilAFB,
                                CoilFloor = response.ResponseStream.Current.Coil.CoilFloor,
                                CoilTube = response.ResponseStream.Current.Coil.CoilTube,
                                CoilPump = response.ResponseStream.Current.Coil.CoilPump
                            };

                            Monitor.Status = new MachineStatus()
                            {
                                Door = response.ResponseStream.Current.Status.Door,
                                Operation = response.ResponseStream.Current.Status.Operation,
                                PatternId = response.ResponseStream.Current.Status.PatternId,
                                TotalStep = response.ResponseStream.Current.Status.TotalStep,
                                CurrentStep = response.ResponseStream.Current.Status.CurrentStep,
                                PatternStatus = response.ResponseStream.Current.Status.PatternStatus,
                                RemainHours = response.ResponseStream.Current.Status.RemainHours,
                                RemainMins = response.ResponseStream.Current.Status.RemainMins,
                                TempLogList = response.ResponseStream.Current.Status.TempLogList
                            };

                            if (_globals.GlobalMonitor.Status != null)
                            {
                                if (!object.Equals(_globals.GlobalMonitor.Status.Operation, Monitor.Status.Operation))
                                {
                                    _globals.GlobalPattern.PatternId = (Monitor.Status.Operation) ? Monitor.Status.PatternId : 0;
                                }

                                if (Monitor.Status.TempLogList.TempLog.Any() && !object.Equals(_globals.ActualPoint.Count, Monitor.Status.TempLogList.TempLog.Count))
                                {
                                    List<OperationLog> result = new List<OperationLog>();
                                    foreach (var item in Monitor.Status.TempLogList.TempLog)
                                    {
                                        result.Add(new OperationLog()
                                        {
                                            TempTime = item.TempTime.ToDateTime().ToLocalTime(),
                                            TempValue = new Temp()
                                            {
                                                TempOven = item.TempValue.TempOven,
                                                TempAFB = item.TempValue.TempAFB,
                                                TempFloor = item.TempValue.TempFloor,
                                                TempTube = item.TempValue.TempTube
                                            }
                                        });
                                    }
                                    _globals.ActualPoint = result;
                                }
                            }                            

                            _globals.GlobalMonitor = Monitor;

                            Reload();
                        }

                        response.Dispose();
                    }));
                });
            }
            else
            {
                Console.WriteLine("Cannot Connect PLC");
                cancellationToken.Cancel();
                cancellationToken.Dispose();
            }
        }

    }
}